@model NDCWeb.Areas.Member.View_Models.FeedbackSpeakerCreateVM

@{
    ViewBag.Title = "Add Speaker Feedback";
    Layout = "~/Areas/Member/Views/Shared/_Layout.cshtml";
}
<style>
    .custom-header {
        background: linear-gradient(135deg, #c7151f, #600208);
        color: #fff;
        font-size: 18px;
        font-weight: bold;
        padding: 10px;
    }

    .form-label {
        margin-bottom: 6px;
        color: #333;
    }

    .form-check-label {
        margin-left: 4px;
        margin-right: 15px;
    }

    textarea.form-control {
        resize: none;
    }

</style>
<div class="container mb-4 mt-4">
    <div class="card shadow p-3">

        <!-- Card Header -->
        <div class="card-header text-center custom-header">
            @ViewBag.Title
        </div>

        @using (Html.BeginForm())
        {
            <div class="card-body">
                @Html.AntiForgeryToken()
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                @Html.HiddenFor(model => model.SpeechEventId)

                <!-- Event Details -->
                <div class="form-row mb-3">
                    @Html.Partial("_SpeechEventDetails", (NDCWeb.Areas.Staff.View_Models.SpeechEventDetailVM)@ViewBag.SpeechEventDetail)
                </div>

                <!-- Lecture Attend -->
                <div class="form-group mb-4">
                    <label class="form-label fw-bold d-block">Have you attended this lecture?</label>
                    <div class="form-check form-check-inline">
                        <input class="form-check-input" type="radio" name="LectureAttend" value="Y">
                        <label class="form-check-label">Yes</label>
                    </div>
                    <div class="form-check form-check-inline">
                        <input class="form-check-input" type="radio" name="LectureAttend" value="N">
                        <label class="form-check-label">No</label>
                    </div>
                    @Html.ValidationMessageFor(model => model.LectureAttend, "", new { @class = "text-danger" })
                </div>

                <!-- Quality of Talk -->
                <div class="form-group mb-4">
                    <label class="form-label fw-bold d-block">Quality of Talk</label>
                    <div class="form-check form-check-inline">
                        <input class="form-check-input" type="radio" name="QualityTalk" value="4">
                        <label class="form-check-label">Excellent</label>
                    </div>
                    <div class="form-check form-check-inline">
                        <input class="form-check-input" type="radio" name="QualityTalk" value="3">
                        <label class="form-check-label">Very Good</label>
                    </div>
                    <div class="form-check form-check-inline">
                        <input class="form-check-input" type="radio" name="QualityTalk" value="2">
                        <label class="form-check-label">Average</label>
                    </div>
                    <div class="form-check form-check-inline">
                        <input class="form-check-input" type="radio" name="QualityTalk" value="1">
                        <label class="form-check-label">Poor</label>
                    </div>
                    @Html.ValidationMessageFor(model => model.QualityTalk, "", new { @class = "text-danger" })
                </div>

                <!-- Recommend Speaker -->
                <div class="form-group mb-4">
                    <label class="form-label fw-bold d-block">Do you recommend the speaker for the next course?</label>
                    <div class="form-check form-check-inline">
                        <input class="form-check-input" type="radio" name="RecomendForNextCourse" value="Y">
                        <label class="form-check-label">Yes</label>
                    </div>
                    <div class="form-check form-check-inline">
                        <input class="form-check-input" type="radio" name="RecomendForNextCourse" value="N">
                        <label class="form-check-label">No</label>
                    </div>
                    @Html.ValidationMessageFor(model => model.RecomendForNextCourse, "", new { @class = "text-danger" })
                </div>

                <!-- Suggestions -->
                <div class="form-group mb-4">
                    @Html.LabelFor(model => model.Suggetions, htmlAttributes: new { @class = "form-label fw-bold" })
                    @Html.TextAreaFor(model => model.Suggetions, new { @class = "form-control", rows = "3", placeholder = "Enter your suggestions..." })
                    @Html.ValidationMessageFor(model => model.Suggetions, "", new { @class = "text-danger" })
                </div>
            </div>

            <!-- Footer -->
            <div class="card-footer text-center bg-white">
                <button type="submit" class="btn btn-outline-danger">Submit</button>
                @Html.ActionLink("Back to List", "SpeechEventActiveList", null, new { @class = "btn btn-outline-primary" })
            </div>
        }
    </div>
</div>




@section Scripts{
    @Scripts.Render("~/bundles/jqueryval")
    <script>
    $(document).ready(function () {
        @*$('#TopicId').val('@Model.TopicId');*@
        //getDatepickerf1('.datepickerJq1');


    });
    $("#SubjectId").change(function () {
        $("#TopicId").empty();
        bindtopic();
        $("#SpeakerId").empty();
    });

    $("#TopicId").change(function () {
        $("#SpeakerId").empty();
        bindspeaker();
    });
    function bindtopic() {
        $.ajax({
            type: 'get',
            url: '/api/subjectMstr/GetTopics/subject/' + $('#SubjectId').val(),
            datatype: 'json',
            success: function (topics) {
                $('#TopicId').append('<option>--Select--</option>');
                $.each(topics, function (i, topic) {
                    $('#TopicId').append('<option value="' + topic.Value + '">' + topic.Text + '</option>');
                });
            },
            error: function () {
                toastr.error('Operation Failed!');
            }
        });
    }

    function bindspeaker() {
        $.ajax({
            type: 'get',
            url: '/api/speaker/GetSpeakers/topic/' + $('#TopicId').val(),
            datatype: 'json',
            success: function (speakers) {
                $('#SpeakerId').append('<option>--Select--</option>');
                $.each(speakers, function (i, speaker) {
                    $('#SpeakerId').append('<option value="' + speaker.Value + '">' + speaker.Text + '</option>');
                });
            },
            error: function () {
                toastr.error('Operation Failed!');
            }
        });
    }


    </script>
}