@model NDCWeb.Areas.Member.View_Models.CrsMemberPersonalUpVM
<style>
    .validation-summary-valid {
        display: none;
    }

    .required::before {
        content: "*";
        font-weight: bold;
        color: red;
    }
</style>
@*@using (Html.BeginForm())*@
@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "formPersEdit" }))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(model => model.CourseMemberId, new { @id = "hdnCourseMemberId" })
    <div class="card shadow-sm p-3">
        <div class="card-header" style="background-color:#fff">
            Personal Details
        </div>
        <div class="card-body">
            <div class="form-row">
                <div class="form-group col-md-3">
                    @Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "control-label" })
                    @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(m => m.FirstName, "", new { @class = "text-danger" })
                </div>
                <div class="form-group col-md-3">
                    @Html.LabelFor(model => model.MiddleName, htmlAttributes: new { @class = "control-label" })
                    @Html.EditorFor(model => model.MiddleName, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.MiddleName, "", new { @class = "text-danger" })
                </div>
                <div class="form-group col-md-3">
                    @Html.LabelFor(model => model.Surname, htmlAttributes: new { @class = "control-label" })
                    @Html.EditorFor(model => model.Surname, new { htmlAttributes = new { @class = "form-control", @placeholder = "Family/Surname" } })
                    @Html.ValidationMessageFor(model => model.Surname, "", new { @class = "text-danger" })
                </div>
                <div class="form-group col-md-3">
                    @Html.LabelFor(model => model.FatherName, htmlAttributes: new { @class = "control-label" })
                    @Html.EditorFor(model => model.FatherName, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.FatherName, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-row">

                <div class="form-group col-md-3">
                    @Html.LabelFor(model => model.FatherMiddleName, htmlAttributes: new { @class = "control-label" })
                    @Html.EditorFor(model => model.FatherMiddleName, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.FatherMiddleName, "", new { @class = "text-danger" })
                </div>
                <div class="form-group col-md-3">
                    @Html.LabelFor(model => model.FatherSurname, htmlAttributes: new { @class = "control-label" })
                    @Html.EditorFor(model => model.FatherSurname, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.FatherSurname, "", new { @class = "text-danger" })
                </div>
                <div class="form-group col-md-3">
                    @Html.LabelFor(model => model.MotherName, htmlAttributes: new { @class = "control-label" })
                    @Html.EditorFor(model => model.MotherName, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.MotherName, "", new { @class = "text-danger" })
                </div>
                <div class="form-group col-md-3">
                    @Html.LabelFor(model => model.MotherMiddleName, htmlAttributes: new { @class = "control-label" })
                    @Html.EditorFor(model => model.MotherMiddleName, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.MotherMiddleName, "", new { @class = "text-danger" })
                </div>
            </div>
        
            <div class="form-row">
                <div class="form-group col-md-3">
                    @Html.LabelFor(model => model.MotherSurname, htmlAttributes: new { @class = "control-label" })
                    @Html.EditorFor(model => model.MotherSurname, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.MotherSurname, "", new { @class = "text-danger" })
                </div>
                <div class="form-group col-md-3">
                    @Html.LabelFor(model => model.NickName, htmlAttributes: new { @class = "control-label" })
                    @Html.ValidationMessageFor(model => model.NickName, "*", new { @class = "text-danger" })
                    @Html.EditorFor(model => model.NickName, new { htmlAttributes = new { @class = "form-control" } })
                </div>
                <div class="form-group col-md-3">
                    @Html.LabelFor(model => model.MobileNo, htmlAttributes: new { @class = "control-label" })
                    @Html.EditorFor(model => model.MobileNo, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.MobileNo, "", new { @class = "text-danger" })
                </div>
                <div class="form-group col-md-3">
                    @Html.LabelFor(model => model.AlternateMobileNo, htmlAttributes: new { @class = "control-label" })
                    @Html.EditorFor(model => model.AlternateMobileNo, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.AlternateMobileNo, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-row">
                <div class="form-group col-md-3">
                    @Html.LabelFor(model => model.IndentificationMark, htmlAttributes: new { @class = "control-label" })
                    @Html.EditorFor(model => model.IndentificationMark, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.IndentificationMark, "", new { @class = "text-danger" })
                </div>
                <div class="form-group col-md-3">
                    @Html.LabelFor(model => model.EmailId, htmlAttributes: new { @class = "control-label" })
                    @Html.EditorFor(model => model.EmailId, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.EmailId, "", new { @class = "text-danger" })
                </div>
                <div class="form-group col-md-3">
                    @Html.LabelFor(model => model.AlternateEmailId, htmlAttributes: new { @class = "control-label" })
                    @Html.EditorFor(model => model.AlternateEmailId, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.AlternateEmailId, "", new { @class = "text-danger" })
                </div>
                <div class="form-group col-md-3">
                    @Html.LabelFor(model => model.DOBirth, htmlAttributes: new { @class = "control-label" })
                    @Html.EditorFor(model => model.DOBirth, new { htmlAttributes = new { @class = "form-control datepickerJq1", @autocomplete = "off" } })
                    @Html.ValidationMessageFor(model => model.DOBirth, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-row">

                <div class="form-group col-md-3">
                    @Html.LabelFor(model => model.MaritalStatus, htmlAttributes: new { @class = "control-label" })
                    @Html.DropDownListFor(model => model.MaritalStatus, (IEnumerable<SelectListItem>)ViewBag.MaritalStatus, "-- Select --", htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.MaritalStatus, "", new { @class = "text-danger" })
                </div>
                <div class="form-group col-md-3">
                    @Html.LabelFor(model => model.DOMarriage, htmlAttributes: new { @class = "control-label" })
                    @Html.EditorFor(model => model.DOMarriage, new { htmlAttributes = new { @class = "form-control datepickerJq1", @autocomplete = "off" } })
                    @Html.ValidationMessageFor(model => model.DOMarriage, "", new { @class = "text-danger" })
                </div>
                <div class="form-group col-md-3">
                    @Html.LabelFor(model => model.SpouseName, htmlAttributes: new { @class = "control-label" })
                    @Html.EditorFor(model => model.SpouseName, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.SpouseName, "", new { @class = "text-danger" })
                </div>
                <div class="form-group col-md-3">
                    @Html.LabelFor(model => model.Gender, htmlAttributes: new { @class = "control-label" })
                    @Html.DropDownListFor(model => model.Gender, (IEnumerable<SelectListItem>)ViewBag.Gender, "-- Select --", htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Gender, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-row">

                <div class="form-group col-md-3">
                    @Html.LabelFor(model => model.BloodGroup, htmlAttributes: new { @class = "control-label" })
                    @Html.DropDownListFor(model => model.BloodGroup, (IEnumerable<SelectListItem>)ViewBag.BloodGroup, "-- Select --", htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.BloodGroup, "", new { @class = "text-danger" })
                </div>
                <div class="form-group col-md-3">
                    @Html.LabelFor(model => model.Height, htmlAttributes: new { @class = "control-label" })
                    @Html.EditorFor(model => model.Height, new { htmlAttributes = new { @class = "form-control", @onkeyup = "onlyNumbers(this)", @maxlength = "3" } })
                    @Html.ValidationMessageFor(model => model.Height, "", new { @class = "text-danger" })
                </div>
                <div class="form-group col-md-3">
                    @Html.LabelFor(model => model.MedicalCategory, htmlAttributes: new { @class = "control-label required" })
                    @Html.EditorFor(model => model.MedicalCategory, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.MedicalCategory, "", new { @class = "text-danger" })
                </div>
                <div class="form-group col-md-3">
                    @Html.LabelFor(model => model.CitizenshipCountryId, htmlAttributes: new { @class = "control-label" })
                    @Html.DropDownListFor(model => model.CitizenshipCountryId, (IEnumerable<SelectListItem>)ViewBag.Country, "-- Select --", htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.CitizenshipCountryId, "", new { @class = "text-danger" })

                </div>
            </div>
            <div class="form-row">
                
                <div class="form-group col-md-3">
                    @Html.LabelFor(model => model.VoterIdNo, htmlAttributes: new { @class = "control-label" })
                    @Html.EditorFor(model => model.VoterIdNo, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.VoterIdNo, "", new { @class = "text-danger" })
                </div>
                <div class="form-group col-md-3">
                    @Html.LabelFor(model => model.PANCardNo, htmlAttributes: new { @class = "control-label" })
                    @Html.EditorFor(model => model.PANCardNo, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.PANCardNo, "", new { @class = "text-danger" })
                </div>
                <div class="form-group col-md-3">
                    @Html.LabelFor(model => model.DietaryPref, htmlAttributes: new { @class = "control-label" })
                    @Html.EditorFor(model => model.DietaryPref, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.DietaryPref, "", new { @class = "text-danger" })
                </div>
                <div class="form-group col-md-3">
                    @Html.LabelFor(model => model.NOK, htmlAttributes: new { @class = "control-label" })
                    @Html.EditorFor(model => model.NOK, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.NOK, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
    </div>
    <div class="card mt-4 shadow-sm p-3">
        <div class="card-header">
            <b> Address </b>
        </div>
        <div class="card-body">
            <div class="form-row">
                <div class="form-group col-md-12">
                    <label class="control-label"><b>Address for Communication</b>(please tick as applicable)</label>
                    @*<p class="control-label col-md-4">(please tick as applicable)</p>*@
                    <div class="form-inline">
                        <label class="containerchk col-md-6">
                            Residential
                            <input type="radio" checked="checked" value="Residential" name="CommunicationAddress">
                            <span class="checkmark"></span>
                        </label>
                        <label class="containerchk col-md-6">
                            Official
                            <input type="radio" value="Official" name="CommunicationAddress">
                            <span class="checkmark"></span>
                        </label>
                    </div>

                    @Html.ValidationMessageFor(model => model.CommunicationAddress, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-row">
                <div class="form-group col-md-3">
                    <label>Flat/House/Door No.</label>
                    @Html.EditorFor(model => model.OfficeHouseNo, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.OfficeHouseNo, "", new { @class = "text-danger" })
                </div>
                <div class="form-group col-md-3">
                    <label>Name of Premises/Building</label>
                    @Html.EditorFor(model => model.OfficePremisesName, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.OfficePremisesName, "", new { @class = "text-danger" })
                </div>
                <div class="form-group col-md-3">
                    <label>Road/Street/Lane</label>
                    @Html.EditorFor(model => model.OfficeStreet, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.OfficeStreet, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-row">
                <div class="form-group col-md-3">
                    <label>Area/Localitry/Post Office</label>
                    @Html.EditorFor(model => model.OfficeArea, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.OfficeArea, "", new { @class = "text-danger" })
                </div>
                <div class="form-group col-md-3">
                    <label>Country</label>
                    @Html.DropDownListFor(model => model.OfficeCountryId, (IEnumerable<SelectListItem>)ViewBag.Country, "-- Select --", htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.OfficeCountryId, "", new { @class = "text-danger" })
                </div>
                <div class="form-group col-md-3">
                    <label>State/Union Territory</label>
                    @Html.DropDownListFor(model => model.OfficeStateId, new SelectList(string.Empty, "Value", "Text"), "-- Select --", htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.OfficeStateId, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-row">
                <div class="form-group col-md-3">
                    <label>Town/City/District</label>
                    @Html.EditorFor(model => model.OfficeCity, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.OfficeCity, "", new { @class = "text-danger" })
                </div>
                <div class="form-group col-md-3">
                    <label>Pin/Zip</label>
                    @Html.EditorFor(model => model.OfficeZipCode, new { htmlAttributes = new { @class = "form-control", @onkeyup = "onlyNumbers(this)", @maxlength = "6" } })
                    @Html.ValidationMessageFor(model => model.OfficeZipCode, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
    </div>
    <div class="card mt-4 shadow-sm p-3">
        <div class="card-header">
            Upload Photographs
        </div>
        <div class="card-body">
            <div class="form-row">
                <div class="form-group col-md-3">
                    @Html.Label("Individual Photograph", htmlAttributes: new { @class = "control-label" })
                    <input id="picfile" type="file" title="Upload Your Photo" name="picfile" onchange="imgValidateEdit('picfile', 'MemberImgPath')" class="uploadify-button form-control-file" />
                    <p class="text-info">Max size 250 KB, File Type (.jpg, .jpeg, .png)</p>
                    @Html.EditorFor(model => model.MemberImgPath, new { htmlAttributes = new { @class = "form-control", @style = "display: none" } })
                </div>

                <div class="form-group col-md-3">
                    @Html.Label("Joint Photograph", htmlAttributes: new { @class = "control-label" })
                    <input id="jointPicfile" type="file" title="Upload Joint Photo" name="jointPicfile" onchange="imgValidateEdit('jointPicfile', 'JointImgPath')" class="uploadify-button form-control-file" accept="image/jpeg,image/png" />
                    <p class="text-info">Max size 250 KB, File Type (.jpg, .jpeg, .png)</p>
                    @Html.EditorFor(model => model.JointImgPath, new { htmlAttributes = new { @class = "form-control", @style = "display: none" } })
                </div>
                <div class="form-group col-md-3">
                    @Html.Label("Copy of AADHAAR Card", htmlAttributes: new { @class = "control-label" })
                    <input id="aadhaarfile" type="file" title="Upload Adhar Copy (both sides)" name="aadhaarfile" onchange="docValidateEdit('aadhaarfile', 'AadhaarPath')" class="uploadify-button form-control-file" accept="application/pdf" />
                    <p class="text-info">Max size 3 MB, PDF only</p>
                    @Html.EditorFor(model => model.AadhaarPath, new { htmlAttributes = new { @class = "form-control", @style = "display: none" } })

                </div>
                <div class="form-group col-md-3">
                    @Html.Label("Sample AADHAAR Image", htmlAttributes: new { @class = "control-label label-info" })
                    <img src="~/Areas/Member/Component/images/AadharSample.jpg" class="img-fluid" />
                </div>
            </div>
        </div>
    </div>
    <div class="card mt-4 shadow-sm p-3">
        <div class="card-header">
            PASSPORT DETAILS
        </div>
        <div class="card-body">
            <p class="label-info text-danger"></p>
            <div class="form-row">
                <div class="form-group col-md-12">
                    <label class="control-label"><b>Are you holding Diplomatic or Official Passport</b></label>
                    <div class="form-inline">
                        <label class="containerchk col-md-6">
                            Yes @Html.RadioButtonFor(model => model.HoldingPassport, "Yes", new { id = "officialpassport-true" })
                            <span class="checkmark"></span>
                        </label>
                        <label class="containerchk col-md-6">
                            No @Html.RadioButtonFor(model => model.HoldingPassport, "No", new { id = "officialpassport-false" })
                            <span class="checkmark"></span>
                        </label>
                        @Html.ValidationMessageFor(model => model.HoldingPassport, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <div class="dvOfficialPassportSelf">
                <div class="form-row">
                    <div class="form-group col-md-3">
                        <Label class="control-label">Passport No</Label>
                        @Html.EditorFor(model => model.MemberPassportNo, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.MemberPassportNo, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group col-md-3">
                        <Label class="control-label">Passport Name</Label>
                        @Html.EditorFor(model => model.MemberPassportName, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.MemberPassportName, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group col-md-3">
                        <Label class="control-label">Date of Issue</Label>
                        @Html.EditorFor(model => model.MemberPassportIssueDate, new { htmlAttributes = new { @class = "form-control datepickerJq1", @autocomplete = "off" } })
                        @Html.ValidationMessageFor(model => model.MemberPassportIssueDate, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group col-md-3">
                        <Label class="control-label">Valid Upto</Label>
                        @Html.EditorFor(model => model.MemberPassportValidUpto, new { htmlAttributes = new { @class = "form-control datepickerJq1", @autocomplete = "off" } })
                        @Html.ValidationMessageFor(model => model.MemberPassportValidUpto, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-row">

                    <div class="form-group col-md-3">
                        <label for="citizencountry">Passport Type</label>
                        @Html.DropDownListFor(model => model.MemberPassportType, (IEnumerable<SelectListItem>)ViewBag.PassportType, "-- Select --", htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.MemberPassportType, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group col-md-3">
                        <label for="citizencountry">Country that issued your passport</label>
                        @Html.DropDownListFor(model => model.CountryIssued, (IEnumerable<SelectListItem>)ViewBag.ddlCountry, "-- Select --", htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.CountryIssued, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group col-md-3">
                        <label>Upload Passport Image (Front & Back)</label>
                        <input id="mbrPassportPicfile" type="file" title="Upload Your Self Passport" name="mbrPassportPicfile" onchange="docValidateEdit('mbrPassportPicfile', 'MemberPassportImgPath')" class="uploadify-button form-control-file" accept="application/pdf" />
                        <p class="text-info">Max size 3 MB, PDF Only</p>
                        @Html.EditorFor(model => model.MemberPassportImgPath, new { htmlAttributes = new { @class = "form-control", @style = "display: none" } })



                    </div>
                    <div class="form-group col-md-3">
                        @Html.Label("Sample Passport Image", htmlAttributes: new { @class = "control-label label-info" })
                        <img src="~/Areas/Member/Component/images/PassportSample.jpg" class="img-fluid" />
                    </div>
                    </div>
                    <div class="form-row">


                        @*<div class="form-group col-md-3">
                <label>Upload passport Images (Back)</label>
                <input id="mbrPassportBackPicfile" type="file" title="Upload Your Self Passport" name="mbrPassportBackPicfile" onchange="imgValidateEdit('mbrPassportBackPicfile', 'MemberPassportBackImgPath')" class="uploadify-button form-control-file" accept="image/jpeg,image/png" />
                <p class="text-info">Max size 250 KB, File Type (.jpg, .jpeg, .png)</p>
                @Html.EditorFor(model => model.MemberPassportBackImgPath, new { htmlAttributes = new { @class = "form-control", @style = "display: none" } })
            </div>*@
                    </div>
                </div>

            <div class="form-row">
                <div class="form-group col-md-12">
                    <label class="control-label"><b>Holding Personal Passport?</b></label>
                    <div class="form-inline">
                        <label class="containerchk col-md-6">
                            Yes
                            @Html.CheckBoxFor(m => m.HoldingPersonalPassportSelf)
                            @Html.ValidationMessageFor(model => model.HoldingPersonalPassportSelf, "", new { @class = "text-danger" })
                            @*<input id="HoldingPersonalPassportSelf" name="HoldingPersonalPassportSelf" type="checkbox" value="true" />*@
                            @*@Html.EditorFor(model => model.HoldingPersonalPassportSelf)*@
                            @*<input type="checkbox" name="HoldingPersonalPassportSelf" />*@
                            <span class="checkmark"></span>
                        </label>
                    </div>
                </div>
            </div>
            <div class="dvPersonalPassportSelf">
                <div class="form-row">
                    <div class="form-group col-md-3">
                        <Label class="control-label">Passport No</Label>
                        @Html.EditorFor(model => model.MemberPersonalPassportNo, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.MemberPassportNo, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group col-md-3">
                        <Label class="control-label">Passport Name</Label>
                        @Html.EditorFor(model => model.MemberPersonalPassportName, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.MemberPersonalPassportName, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group col-md-3">
                        <Label class="control-label">Date of Issue</Label>
                        @Html.EditorFor(model => model.MemberPersonalPassportIssueDate, new { htmlAttributes = new { @class = "form-control datepickerJq1", @autocomplete = "off" } })
                        @Html.ValidationMessageFor(model => model.MemberPassportIssueDate, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group col-md-3">
                        <Label class="control-label">Valid Upto</Label>
                        @Html.EditorFor(model => model.MemberPersonalPassportValidUpto, new { htmlAttributes = new { @class = "form-control datepickerJq1", @autocomplete = "off" } })
                        @Html.ValidationMessageFor(model => model.MemberPassportValidUpto, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group col-md-3">
                        <label for="citizencountry">Country that issued your passport</label>
                        @Html.DropDownListFor(model => model.CountryIssuedPersonalPassport, (IEnumerable<SelectListItem>)ViewBag.ddlCountry, "-- Select --", htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.CountryIssuedPersonalPassport, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group col-md-3">
                        <label>Upload Passport Image (Front & Back)</label>
                        <input id="mbrPersonalPassportPicfile" type="file" title="Upload Your Self Passport" name="mbrPersonalPassportPicfile" onchange="docValidateEdit('mbrPersonalPassportPicfile', 'MemberPersonalPassportImgPath')" class="uploadify-button form-control-file" accept="application/pdf" />
                        <p class="text-info">Max size 3 MB, PDF Only</p>
                        @Html.EditorFor(model => model.MemberPersonalPassportImgPath, new { htmlAttributes = new { @class = "form-control", @style = "display: none" } })



                    </div>
                    <div class="form-group col-md-3">
                        @Html.Label("Sample Passport Image", htmlAttributes: new { @class = "control-label label-info" })
                        <img src="~/Areas/Member/Component/images/PassportSample.jpg" class="img-fluid" />
                    </div>

                        @*<div class="form-group col-md-3">
                <label>Upload passport Images (Back)</label>
                <input id="mbrPersonalPassportBackPicfile" type="file" title="Upload Your Self Passport" name="mbrPersonalPassportBackPicfile" onchange="imgValidateEdit('mbrPersonalPassportBackPicfile', 'MemberPersonalPassportBackImgPath')" class="uploadify-button form-control-file" accept="image/jpeg,image/png" />
                <p class="text-info">Max size 250 KB, File Type (.jpg, .jpeg, .png)</p>
                @Html.EditorFor(model => model.MemberPersonalPassportBackImgPath, new { htmlAttributes = new { @class = "form-control", @style = "display: none" } })
            </div>*@
                    </div>
                </div>
        </div>
    </div>
    <div class="card mt-4 shadow-sm p-3">
        <div class="dvVisaDetailSelf">
            <div class="card mt-4 shadow-sm">
                <div class="card-header">
                    VISA DETAILS
                </div>
                <div class="card-body">
                    <div class="form-row">
                        <div class="form-group col-md-3">
                            <Label class="control-label">Visa No</Label>
                            @Html.EditorFor(model => model.VisaNo, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.VisaNo, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group col-md-3">
                            <Label class="control-label">Date of Issue</Label>
                            @Html.EditorFor(model => model.VisaIssueDate, new { htmlAttributes = new { @class = "form-control datepickerJq1", @autocomplete = "off" } })
                            @Html.ValidationMessageFor(model => model.VisaIssueDate, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group col-md-3">
                            <Label class="control-label">Valid Upto</Label>
                            @Html.EditorFor(model => model.VisaValidUpto, new { htmlAttributes = new { @class = "form-control datepickerJq1", @autocomplete = "off" } })
                            @Html.ValidationMessageFor(model => model.VisaValidUpto, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group col-md-3">
                            <label>Upload Visa images (Front and Back) </label>
                            <input id="visaPicfile" type="file" title="Upload Your Visa" name="selfFRROPicfile" onchange="imgValidateEdit('visaPicfile', 'VisaPath')" class="uploadify-button form-control-file" />
                            <p class="text-info">Max size 250 KB, File Type (.jpg, .jpeg, .png)</p>
                            @Html.EditorFor(model => model.VisaPath, new { htmlAttributes = new { @class = "form-control", @style = "display: none" } })
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="card-header">
            FRRO (to be filled by Foreign Officers only)
        </div>
        <div class="card-body">
            <div class="form-row">
                <div class="form-group col-md-3">
                    <Label class="control-label">FRRO No</Label>
                    @Html.EditorFor(model => model.SelfFRRONo, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.SelfFRRONo, "", new { @class = "text-danger" })
                </div>
                <div class="form-group col-md-3">
                    <Label class="control-label">Date of Issue</Label>
                    @Html.EditorFor(model => model.SelfIssueDate, new { htmlAttributes = new { @class = "form-control datepickerJq1", @autocomplete = "off" } })
                    @Html.ValidationMessageFor(model => model.SelfIssueDate, "", new { @class = "text-danger" })
                </div>
                <div class="form-group col-md-3">
                    <Label class="control-label">Valid Upto</Label>
                    @Html.EditorFor(model => model.SelfValidUpto, new { htmlAttributes = new { @class = "form-control datepickerJq1", @autocomplete = "off" } })
                    @Html.ValidationMessageFor(model => model.SelfValidUpto, "", new { @class = "text-danger" })
                </div>
                <div class="form-group col-md-3">
                    <label>Upload FRRO Images: </label>
                    <input id="selfFRROPicfile" type="file" title="Upload Your Self FRRO" name="selfFRROPicfile" onchange="imgValidateEdit('selfFRROPicfile', 'SelfFRROPath')" class="uploadify-button form-control-file" accept="image/jpeg,image/png" />
                    <p class="text-info">Max size 250 KB, File Type (.jpg, .jpeg, .png)</p>
                    @Html.EditorFor(model => model.SelfFRROPath, new { htmlAttributes = new { @class = "form-control", @style = "display: none" } })
                </div>
            </div>
        </div>
    </div>

    @*</div>*@
    <div class="card mt-4 shadow-sm p-3">
        <div class="card-header">
            BIOGRAPHICAL SKETCH (Not more than 100 words, Do not use ALL capital letters)
        </div>
        <div class="card-body">
            <div class="form-row">
                <div class="form-group col-md-12">
                    @Html.TextAreaFor(model => model.BioSketch, htmlAttributes: new { @class = "form-control editorHtml", rows = "5", autocomplete = "off", autocorrect = "off", value = "" })
                    @Html.ValidationMessageFor(model => model.BioSketch, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
    </div>

    <div class="card-footer bg-white text-center">
        <div class="form-group col-md-12">
            <div class="checkbox">
                @Html.EditorFor(model => model.Undertaking)
                @Html.LabelFor(model => model.Undertaking, htmlAttributes: new { @class = "control-label" })
                @Html.ValidationMessageFor(model => model.Undertaking, "", new { @class = "text-danger" })
            </div>
        </div>
        <button type="button" id="btnSave" class="btn btn-outline-danger" onclick="editPersonalDetail()">Update</button>

        @*@Html.ValidationSummary(false, "Please fix the following error and then submit the form")*@
    </div>
    <div class="card-body">
        @Html.ValidationSummary(false, "Please fix the following error and then submit the form:-", new { @class = "text-danger" })
    </div>
    @*</div>*@
    @*</div>*@
}

<div id="dialog" style="display: none">
</div>
@Scripts.Render("~/bundles/jqueryval")
<script>
        $(document).ready(function () {
            $('#Gender').val('@Model.Gender');
            $('#BloodGroup').val('@Model.BloodGroup');
            $('#MaritalStatus').val('@Model.MaritalStatus');

            getDatepickerf1('.datepickerJq1');
            isEnableDOMarriage();

            if ('@ViewData["SelectedOfficeState"]' != null) {
                bindOfficeState();
            }
            $("#OfficeCountryId").change(function () {
                $("#OfficeStateId").empty();
                bindOfficeState();
            });

        @*if ('@ViewData["SelectedResidentState"]' != null) {
            bindResidentState();
        }*@
            //$("#ResidentCountryId").change(function () {
            //    $("#ResidentStateId").empty();
            //    bindResidentState();
            //});
        });
    function fillPersonalDetail() {
        let personalDetail = {
            FirstName: $("#FirstName").val(),
            MiddleName: $("#MiddleName").val(),
            Surname: $("#Surname").val(),
            FatherName: $("#FatherName").val(),
            FatherMiddleName: $("#FatherMiddleName").val(),
            FatherSurname: $("#FatherSurname").val(),
            MotherName: $("#MotherName").val(),
            MotherMiddleName: $("#MotherMiddleName").val(),
            MotherSurname: $("#MotherSurname").val(),
            NickName: $("#NickName").val(),
            Gender: $("#Gender").val(),
            MaritalStatus: $("#MaritalStatus").val(),
            DOBirth: $("#DOBirth").val(),
            DOMarriage: $("#DOMarriage").val(),

            EmailId: $("#EmailId").val(),
            AlternateEmailId: $("#AlternateEmailId ").val(),
            MobileNo: $("#MobileNo").val(),
            AlternateMobileNo:$("#AlternateMobileNo").val(),
            IndentificationMark: $("#IndentificationMark").val(),
            BloodGroup: $("#BloodGroup").val(),
            PANCardNo: $("#PANCardNo").val(),
            VoterIdNo: $("#VoterIdNo").val(),
            StayBySpouse: $("#StayBySpouse").val(),

            Height: $("#Height").val(),
            //CommunicationAddress: $("#CommunicationAddress").val(),
            CommunicationAddress: $('input[name="CommunicationAddress"]:checked').val(),
            OfficeHouseNo: $("#OfficeHouseNo").val(),
            OfficePremisesName: $("#OfficePremisesName").val(),
            OfficeStreet: $("#OfficeStreet").val(),
            OfficeArea: $("#OfficeArea").val(),
            OfficeCity: $("#OfficeCity").val(),
            OfficeZipCode: $("#OfficeZipCode").val(),
            /*ResidentHouseNo: $("#ResidentHouseNo").val(),
            ResidentPremisesName: $("#ResidentPremisesName").val(),
            ResidentStreet: $("#ResidentStreet").val(),
            ResidentArea: $("#ResidentArea").val(),
            ResidentCity: $("#ResidentCity").val(),
            ResidentZipCode: $("#ResidentZipCode").val(),*/
            BioSketch: $("#BioSketch").val(),
            Undertaking: $("#Undertaking").val(),

            MemberImgPath: $("#MemberImgPath").val() || '#',
            JointImgPath: $("#JointImgPath").val() || '#',
            AadhaarPath: $("#AadhaarPath").val() || '#',

            DietaryPref: $("#DietaryPref").val(),
            MedicalCategory: $("#MedicalCategory").val(),

            SpouseName: $("#SpouseName").val(),
            NOK: $("#NOK").val(),

            OfficeStateId: $("#OfficeStateId").val(),
            //ResidentStateId: $("#ResidentStateId").val(),
            CitizenshipCountryId: $("#CitizenshipCountryId").val(),

            //psl
            //HoldingPassport: $("#HoldingPassport").val(),
            HoldingPassport: $('input[name="HoldingPassport"]:checked').val(),
            MemberPassportNo: $("#MemberPassportNo").val(),
            MemberPassportName: $("#MemberPassportName").val(),
            MemberPassportIssueDate: $("#MemberPassportIssueDate").val(),
            MemberPassportValidUpto: $("#MemberPassportValidUpto").val(),
            MemberPassportType: $("#MemberPassportType").val(),
            CountryIssued: $("#CountryIssued").val(),
            MemberPassportImgPath: $("#MemberPassportImgPath").val(),
            MemberPassportBackImgPath: $("#MemberPassportBackImgPath").val(),
            VisaNo: $("#VisaNo").val(),
            VisaIssueDate: $("#VisaIssueDate").val(),
            VisaValidUpto: $("#VisaValidUpto").val(),
            VisaPath: $("#VisaPath").val(),
            SelfFRRONo: $("#SelfFRRONo").val(),
            SelfIssueDate: $("#SelfIssueDate").val(),
            SelfValidUpto: $("#SelfValidUpto").val(),
            SelfFRROPath: $("#SelfFRROPath").val(),
            //
            HoldingPersonalPassportSelf: $("#HoldingPersonalPassportSelf").is(":checked"),
        }
        if ($('#HoldingPersonalPassportSelf').is(":checked")) {
            personalDetail.MemberPersonalPassportNo = $("#MemberPersonalPassportNo").val();
            personalDetail.MemberPersonalPassportName = $("#MemberPersonalPassportName").val();
            personalDetail.MemberPersonalPassportIssueDate = $("#MemberPersonalPassportIssueDate").val();
            personalDetail.MemberPersonalPassportValidUpto = $("#MemberPersonalPassportValidUpto").val();
            personalDetail.CountryIssuedPersonalPassport = $("#CountryIssuedPersonalPassport").val();
            personalDetail.MemberPersonalPassportImgPath = $("#MemberPersonalPassportImgPath").val() || '#';
            personalDetail.MemberPersonalPassportBackImgPath = $("#MemberPersonalPassportBackImgPath").val() || '#';
        }
        return personalDetail;
    }

    function editPersonalDetail() {
        if ($("#formPersEdit").valid()) {
            let CourseMemberId = $('#hdnCourseMemberId').val();
            let personalDetail = fillPersonalDetail();
            $.ajax({
                type: 'post',
                url: '/api/courseMembers/PersonalEdit/' + CourseMemberId,
                //contentType: "application/json; charset=utf-8",
                //data: JSON.stringify(personalDetail),
                data: personalDetail,
                datatype: 'json',
                success: function (data, textStatus, xhr) {
                    toastr.info(textStatus);
                    displayTab('PersonalDetailPartial');
                    //alert(xhr.getResponseHeader('location'));
                },
                error: function () {
                    toastr.error('Operation Failed!');
                }
            });
        }
    }

    function bindOfficeState() {
        $.ajax({
            type: 'get',
            url: '/api/countrystatecity/GetStates/country/' + $('#OfficeCountryId').val(),
            datatype: 'json',
            success: function (states) {
                $.each(states, function (i, state) {
                    $('#OfficeStateId').append('<option value="' + state.Value + '">' + state.Text + '</option>');
                });
                if ('@ViewData["SelectedOfficeState"]' != 0) {
                    $("#OfficeStateId").val('@ViewData["SelectedOfficeState"]');
                }
            },
            error: function () {
                alert('Server Not Found');
            }
        });
    }

    @*function bindResidentState() {
        $.ajax({
            type: 'get',
            url: '/api/countrystatecity/GetStates/country/' + $('#ResidentCountryId').val(),
            datatype: 'json',
            success: function (states) {
                $.each(states, function (i, state) {
                    $('#ResidentStateId').append('<option value="' + state.Value + '">' + state.Text + '</option>');
                });
                if ('@ViewData["SelectedResidentState"]' != 0) {
                    $("#ResidentStateId").val('@ViewData["SelectedResidentState"]');
                }
            },
            error: function () {
                alert('Server Not Found');
            }
        });
    }*@

    // #region Personal Passport
    $(document).ready(function () {
        changeHoldingPersonalPassport();
    });
    $('#HoldingPersonalPassportSelf').change(function () {
        changeHoldingPersonalPassport();
    });
    function changeHoldingPersonalPassport() {
        if ($('#HoldingPersonalPassportSelf').is(":checked"))
            $(".dvPersonalPassportSelf").show();
        else
            $(".dvPersonalPassportSelf").hide();
    }
    // #endregion

    // #region Visa Detail
    $(document).ready(function () {
        showVisaDetail();
    });
    $('#CitizenshipCountryId').change(function () {
        showVisaDetail();
    });
    function showVisaDetail() {
        if ($('#CitizenshipCountryId option:selected').text() == "India") {
            $(".dvVisaDetailSelf").hide();
        }
        else {
            $(".dvVisaDetailSelf").show();
        }
    }
    // #endregion

    // #region Marital
    $(function () {
        $('#MaritalStatus').change(function () {
            isEnableDOMarriage();
        });
    });
    function isEnableDOMarriage() {
        if ($('#MaritalStatus').val() == 'Married') {
            $('#DOMarriage').removeAttr("disabled");
            $('#SpouseName').removeAttr("disabled");

            //$('#DOMarriage').val('');
            //$('#DOMarriage').focus();
        }
        else {
            $('#DOMarriage').val('');
            $("#DOMarriage").attr("disabled", "disabled");
            $('#SpouseName').val('');
            $("#SpouseName").attr("disabled", "disabled");
        }
    }
    // #endregion
    // #region Official Passport
    $(document).ready(function () {
        loadChkOfficialPassport();
    });
    $('#officialpassport-true').change(function () {
        changeOfficialPassport();
    });
    $('#officialpassport-false').change(function () {
        changeOfficialPassport();
    });
    function changeOfficialPassport() {
        if ($('#officialpassport-true').is(":checked"))
            $(".dvOfficialPassportSelf").show();
        else
            $(".dvOfficialPassportSelf").hide();
    }
    function loadChkOfficialPassport() {
        let holdingPassport = '@Model.HoldingPassport';
        if (holdingPassport == "Yes") {
            $('#officialpassport-true').prop("checked", true);
            $(".dvOfficialPassportSelf").show();
        }
        else {
            $('#officialpassport-false').prop("checked", true);
            $(".dvOfficialPassportSelf").hide();
        }
    }
    // #endregion


    // #region Upload Helper
    function imgValidateEdit(fileUploadId, fileLocId) {
        let fileTypes = ['jpg', 'jpeg', 'png'];
        let extValidate = fileExtensionValidation(fileUploadId, fileTypes);
        let sizeValidate = fileSizeValidation(fileUploadId, 1024);
        if (extValidate == true && sizeValidate == true) {
            let url = '@Url.Action("ImageUpload")';
            uploadFile(fileUploadId, fileLocId, url);
        }
        //else {
        //    $('#' + fileLocId).val('');
        //}
    }
    function docValidateEdit(fileUploadId, fileLocId) {
        let fileTypes = ['pdf', 'doc', 'docx', 'txt', 'xlsx', 'ppt', 'zip'];
        let extValidate = fileExtensionValidation(fileUploadId, fileTypes);
        let sizeValidate = fileSizeValidation(fileUploadId, 3072);
        if (extValidate == true && sizeValidate == true) {
            let url = '@Url.Action("DocumentUpload")';
            uploadFile(fileUploadId, fileLocId, url);
        }
        //else {
        //    $('#' + fileLocId).val('');
        //}
    }
    // #endregion

    // #region Date Ranges
    $('#MemberPassportIssueDate').datepicker({
        dateFormat: 'dd M yy',
        changeMonth: true,
        changeYear: true,
        onClose: function (selectedDate) {
            $('#MemberPassportValidUpto').datepicker("option", "minDate", selectedDate, "dateFormat", 'dd M yy');
        }
    });
    $('#MemberPassportValidUpto').datepicker({
        dateFormat: 'dd M yy',
        changeMonth: true,
        changeYear: true,
        onClose: function (selectedDate) {
            $('#MemberPassportIssueDate').datepicker("option", "maxDate", selectedDate, "dateFormat", 'dd M yy');
        }
    });

    $('#VisaIssueDate').datepicker({
        dateFormat: 'dd M yy',
        changeMonth: true,
        changeYear: true,
        onClose: function (selectedDate) {
            $('#VisaValidUpto').datepicker("option", "minDate", selectedDate, "dateFormat", 'dd M yy');
        }
    });
    $('#VisaValidUpto').datepicker({
        dateFormat: 'dd M yy',
        changeMonth: true,
        changeYear: true,
        onClose: function (selectedDate) {
            $('#VisaIssueDate').datepicker("option", "maxDate", selectedDate, "dateFormat", 'dd M yy');
        }
    });

    $('#SelfIssueDate').datepicker({
        dateFormat: 'dd M yy',
        changeMonth: true,
        changeYear: true,
        onClose: function (selectedDate) {
            $('#SelfValidUpto').datepicker("option", "minDate", selectedDate, "dateFormat", 'dd M yy');
        }
    });
    $('#SelfValidUpto').datepicker({
        dateFormat: 'dd M yy',
        changeMonth: true,
        changeYear: true,
        onClose: function (selectedDate) {
            $('#SelfIssueDate').datepicker("option", "maxDate", selectedDate, "dateFormat", 'dd M yy');
        }
    });
        // #endregion
</script>
<script>
        function viewAck() {
            let personalDetail = fillPersonalDetail();
            $.ajax({
                type: "POST",
                url: '@Url.Action("RegisterACK")',
                data: { modal: personalDetail },
                //contentType: "application/json; charset=utf-8",
                dataType: "html",
                success: function (response) {
                    $('#dialog').html(response);
                    $('#dialog').dialog('open');
                },
                failure: function (response) {
                    alert('Operation Failed!');
                },
                error: function (response) {
                    alert('Server Not Found!');
                }
            });
        }
        $(function () {
            $("#dialog").dialog({
                title: 'Course Member Details',
                autoOpen: false,
                //maxWidth: 800,
                //maxHeight: 700,
                width: 900,
                height: 700,
                modal: true,
                buttons: {
                    Ok: function () {
                        $("[id*=btnSave]").click();
                    },
                    Cancel: function () {
                        $(this).dialog("close");
                    }
                },
                close: function () {
                }
            });
        });
</script>
