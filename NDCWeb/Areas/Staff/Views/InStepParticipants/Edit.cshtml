@model NDCWeb.Areas.Member.View_Models.InStepRegistrationVM
@using NDCWeb.Infrastructure.Extensions;
@{
    ViewBag.Title = "Edit";
    Layout = "~/Areas/Staff/Views/Shared/_Layout.cshtml";

}
@Styles.Render("~/bundles/datatables/ButtonCss")
<link href="~/Component/DataTable2/Buttons-1.6.1/css/buttons.dataTables.min.css" rel="stylesheet" />
<link href="~/Component/DataTable2/Buttons-1.6.1/css/buttons.jqueryui.min.css" rel="stylesheet" />
<link href="~/Component/Custom/css/customStyle.css" rel="stylesheet" />

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    <div class="card shadow">
        <div class="card-header">
            Update In-Step Course Participent Data
        </div>
        <div class="card-body">
            <style>
                .validation-summary-valid {
                    display: none;
                }

                .required::before {
                    content: "*";
                    font-weight: bold;
                    color: red;
                }
            </style>
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.InStepRegId)
            @Html.HiddenFor(model => model.CourseId)
            @Html.HiddenFor(model => model.StudentType)
            <div class="form-row">
                <div class="col-md-9">
                    <div class="form-group col-md-4">
                        @Html.LabelFor(model => model.EmailId, htmlAttributes: new { @class = "control-label" })
                        @Html.EditorFor(model => model.EmailId, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.EmailId, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group col-md-4">
                        @Html.LabelFor(model => model.MobileNo, htmlAttributes: new { @class = "control-label" })
                        @Html.EditorFor(model => model.MobileNo, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.MobileNo, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group col-md-4">
                        @Html.LabelFor(model => model.WhatsappNo, htmlAttributes: new { @class = "control-label" })
                        @Html.EditorFor(model => model.WhatsappNo, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.WhatsappNo, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group col-md-4">
                        @Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "control-label" })
                        @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group col-md-4">
                        @Html.LabelFor(model => model.MiddleName, htmlAttributes: new { @class = "control-label" })

                        @Html.EditorFor(model => model.MiddleName, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.MiddleName, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group col-md-4">
                        @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "control-label" })
                        @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group col-md-4">
                        @Html.LabelFor(model => model.FatherName, htmlAttributes: new { @class = "control-label" })
                        @Html.EditorFor(model => model.FatherName, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.FatherName, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group col-md-4">
                        @Html.LabelFor(model => model.DOB, htmlAttributes: new { @class = "control-label" })
                        @Html.EditorFor(model => model.DOB, new { htmlAttributes = new { @class = "form-control datepickerJq1", @autocomplete = "off" } })
                        @Html.ValidationMessageFor(model => model.DOB, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group col-md-4">
                        @Html.LabelFor(model => model.HonourAward, htmlAttributes: new { @class = "control-label" })
                        @Html.EditorFor(model => model.HonourAward, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.HonourAward, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="form-group col-md-12">
                        <div class="tb-container">
                            <div class="tb-img-view">
                                @if (Model.PhotoPath != null && Model.PhotoPath != "#")
                                {
                                    <img src="@Url.Content(Model.PhotoPath)" class="img-thumbnail" id="scream" width="120" />
                                }
                                <canvas class="img-thumbnail col-md-6" id="can" width="120">
                                </canvas>
                            </div>
                            <input type="hidden" id="PhotoPath" name="PhotoPath" value="@Model.PhotoPath" />
                            <input id="picfile" type="file" name="picfile" multiple onchange="imgValidateEdit('picfile', 'PhotoPath','@Url.Action("ImageUpload")');upload();" class="uploadify-button form-control-file" accept="image/jpeg,image/png" />
                            <span class="text-info text-center imgtextPhotoPath">Upload Your Photo. Max size upto 250 KB, File Type (.jpg, .jpeg, .png)</span>
                        </div>
                        @*@Html.Label("Individual Photograph", htmlAttributes: new { @class = "control-label" })
                    <input type="hidden" id="PhotoPath" name="PhotoPath" />
                    <input id="picfile" type="file" name="picfile" multiple accept="image/jpeg,image/png" onchange="imgValidateEdit('picfile', 'PhotoPath');" class="uploadify-button form-control-file" />
                    @Html.ValidationMessageFor(model => model.PhotoPath, "", new { @class = "text-danger" })*@
                    </div>
                </div>
            </div>
            <div class="form-row">
                <div class="form-group col-md-3">
                    @Html.LabelFor(model => model.Gender, htmlAttributes: new { @class = "control-label" })
                    @Html.DropDownList("Gender", (IEnumerable<SelectListItem>)ViewBag.Gender, "-- Select --", htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Gender, "", new { @class = "text-danger" })
                </div>
                <div class="form-group col-md-3">
                    @Html.LabelFor(model => model.ServicesCategory, htmlAttributes: new { @class = "control-label" })
                    @Html.DropDownList("ServicesCategory", (IEnumerable<SelectListItem>)ViewBag.Service, "-- Select --", htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.ServicesCategory, "", new { @class = "text-danger" })
                </div>
                <div class="form-group col-md-3">
                    @Html.LabelFor(model => model.ServiceNo, htmlAttributes: new { @class = "control-label" })
                    @Html.EditorFor(model => model.ServiceNo, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.ServiceNo, "", new { @class = "text-danger" })
                </div>
                <div class="form-group col-md-3">
                    @Html.LabelFor(model => model.RankId, htmlAttributes: new { @class = "control-label" })
                    @Html.DropDownList("RankId", new SelectList(string.Empty, "Value", "Text"), "-- Select --", htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.RankId, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-row">
                <div class="form-group col-md-4">
                    @Html.LabelFor(model => model.BranchDepartment, htmlAttributes: new { @class = "control-label" })
                    @Html.EditorFor(model => model.BranchDepartment, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.BranchDepartment, "", new { @class = "text-danger" })
                </div>
                <div class="form-group col-md-4">
                    @Html.LabelFor(model => model.DateOfCommissioning, htmlAttributes: new { @class = "control-label" })
                    @Html.EditorFor(model => model.DateOfCommissioning, new { htmlAttributes = new { @class = "form-control datepickerJq1", @autocomplete = "off" } })
                    @Html.ValidationMessageFor(model => model.DateOfCommissioning, "", new { @class = "text-danger" })
                </div>
                <div class="form-group col-md-4">
                    @Html.LabelFor(model => model.SeniorityYear, htmlAttributes: new { @class = "control-label" })
                    @Html.EditorFor(model => model.SeniorityYear, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.SeniorityYear, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-row">
                <div class="form-group col-md-6">
                    @Html.LabelFor(model => model.AddressLocal, htmlAttributes: new { @class = "control-label" })
                    @Html.EditorFor(model => model.AddressLocal, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.AddressLocal, "", new { @class = "text-danger" })
                </div>
                <div class="form-group col-md-6">
                    @Html.LabelFor(model => model.AddressPermanent, htmlAttributes: new { @class = "control-label" })
                    @Html.EditorFor(model => model.AddressPermanent, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.AddressPermanent, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-row">
                <div class="form-group col-md-6">
                    @Html.LabelFor(model => model.NOKName, htmlAttributes: new { @class = "control-label" })
                    @Html.EditorFor(model => model.NOKName, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.NOKName, "", new { @class = "text-danger" })
                </div>

                <div class="form-group col-md-6">
                    @Html.LabelFor(model => model.NOKContact, htmlAttributes: new { @class = "control-label" })
                    @Html.EditorFor(model => model.NOKContact, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.NOKContact, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-row">
                <div class="form-group col-md-4">
                    @Html.LabelFor(model => model.PassportNo, htmlAttributes: new { @class = "control-label" })
                    @Html.EditorFor(model => model.PassportNo, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.PassportNo, "", new { @class = "text-danger" })
                </div>

                <div class="form-group col-md-4">
                    @Html.LabelFor(model => model.PassportAuthority, htmlAttributes: new { @class = "control-label" })
                    @Html.EditorFor(model => model.PassportAuthority, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.PassportAuthority, "", new { @class = "text-danger" })
                </div>
                <div class="form-group col-md-4">
                    @if (Model.PassportDocPath != null && Model.PassportDocPath != "#")
                    {
                        <label for="PassportDocPath" class="control-label text-danger"> <a href="@Url.Content(Model.PassportDocPath.Replace("~", ""))"><i class="fa fa-file-pdf-o text-danger"></i> View Copy of Passport</a> </label>
                    }
                    else
                    {
                        <label for="PassportDocPath" class="control-label text-danger"> <a href="#">Upload a Copy of Passport</a></label>
                    }
                    <input type="hidden" id="PassportDocPath" name="PassportDocPath" />
                    <input id="passportfile" type="file" name="passportfile" multiple onchange="docValidateEdit('passportfile', 'PassportDocPath','@Url.Action("DocumentUpload")');" class="uploadify-button form-control-file" accept="application/pdf" />
                    <span class="text-info text-center imgtextPassportDocPath">Copy of Passport in PDF format only. Max size upto 500 KB.</span>
                    @Html.ValidationMessageFor(model => model.PassportDocPath, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-row">
                <div class="form-group col-md-6">
                    @Html.LabelFor(model => model.AadhaarNo, htmlAttributes: new { @class = "control-label" })
                    @Html.EditorFor(model => model.AadhaarNo, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.AadhaarNo, "", new { @class = "text-danger" })
                </div>
                <div class="form-group col-md-6">
                    @if (Model.AadhaarDocPath != null && Model.AadhaarDocPath != "#")
                    {
                        <label for="AadhaarDocPath" class="control-label text-danger"><a href="@Url.Content(Model.AadhaarDocPath.Replace("~",""))"><i class="fa fa-file-pdf-o text-danger"></i> View Copy of Aadhaar/e-Aadhaar</a></label>
                    }
                    else
                    {
                        <label for="AadhaarDocPath" class="control-label text-danger"><a href="#">Upload a Copy of Aadhaar</a></label>
                    }
                    <input type="hidden" id="AadhaarDocPath" name="AadhaarDocPath" value="@Model.AadhaarDocPath" />
                    <input id="aadhaarfile" type="file" name="aadhaarfile" multiple onchange="docValidateEdit('aadhaarfile', 'AadhaarDocPath','@Url.Action("DocumentUpload")');" class="uploadify-button form-control-file" accept="application/pdf" />
                    <span class="text-info text-center imgtextAadhaarDocPath">Copy of AADHAAR in PDF format only. Max size upto 500 KB.</span>
                    @Html.ValidationMessageFor(model => model.AadhaarDocPath, "", new { @class = "text-danger" })

                </div>
            </div>
            <div class="form-row">
                <div class="form-group col-md-12">
                    @Html.LabelFor(model => model.BioData, htmlAttributes: new { @class = "control-label col-md-4" })
                    @Html.TextAreaFor(model => model.BioData, htmlAttributes: new { @class = "form-control editorHtml", rows = "10", autocomplete = "off", autocorrect = "off", value = "" })
                    @Html.ValidationMessageFor(model => model.BioData, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-row">
                <div class="form-group col-md-4">
                    @Html.LabelFor(model => model.ArrivalMode, htmlAttributes: new { @class = "control-label" })
                    @Html.EditorFor(model => model.ArrivalMode, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.ArrivalMode, "", new { @class = "text-danger" })
                </div>
                <div class="form-group col-md-2">
                    @Html.LabelFor(model => model.ArrivalTime, htmlAttributes: new { @class = "control-label" })
                    @Html.EditorFor(model => model.ArrivalTime, new { htmlAttributes = new { @class = "form-control datepickerJq1", @autocomplete = "off" } })
                    @Html.ValidationMessageFor(model => model.ArrivalTime, "", new { @class = "text-danger" })
                </div>
                <div class="form-group col-md-4">
                    @Html.LabelFor(model => model.DepartureMode, htmlAttributes: new { @class = "control-label" })
                    @Html.EditorFor(model => model.DepartureMode, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.DepartureMode, "", new { @class = "text-danger" })
                </div>
                <div class="form-group col-md-2">
                    @Html.LabelFor(model => model.DepartureTime, htmlAttributes: new { @class = "control-label" })
                    @Html.EditorFor(model => model.DepartureTime, new { htmlAttributes = new { @class = "form-control datepickerJq1", @autocomplete = "off" } })
                    @Html.ValidationMessageFor(model => model.DepartureTime, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-row">
                <div class="form-group col-md-4">
                    @*@Html.LabelFor(model => model.ApprovedNominationDocPath, htmlAttributes: new { @class = "control-label" })*@
                    @if (Model.ApprovedNominationDocPath != null && Model.ApprovedNominationDocPath != "#")
                    {
                        <label for="ApprovedNominationDocPath" class="control-label text-danger"><a href="@Url.Content(Model.ApprovedNominationDocPath.Replace("~",""))"><i class="fa fa-file-pdf-o text-danger"></i> View Approval/Nomination Copy</a></label>
                    }
                    else
                    {
                        <label for="ApprovedNominationDocPath" class="control-label text-danger"><a href="#">Upload a Copy of Approval/Nomination</a></label>
                    }
                    <input type="hidden" id="ApprovedNominationDocPath" name="ApprovedNominationDocPath" value="@Model.ApprovedNominationDocPath" />
                    <input id="approvedfile" type="file" name="approvedfile" multiple onchange="docValidateEdit('approvedfile', 'ApprovedNominationDocPath','@Url.Action("DocumentUpload")');" class="uploadify-button form-control-file" accept="application/pdf" />
                    <span class="text-info text-center imgtextApprovedNominationDocPath">Copy of Approval/Nomination in PDF format only. Max size upto 500 KB.</span>
                    @Html.ValidationMessageFor(model => model.ApprovedNominationDocPath, "", new { @class = "text-danger" })
                </div>
                <div class="form-group col-md-8">
                    @Html.LabelFor(model => model.AnyOtherRequirement, htmlAttributes: new { @class = "control-label" })
                    @Html.EditorFor(model => model.AnyOtherRequirement, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.AnyOtherRequirement, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        <div class="card-footer text-center bg-white">
            <input type="submit" value="Save" class="btn btn-primary" />
            @Html.EncodedActionLink("Back to List", "Index", "InStepParticipants", "staff", new { id = Model.CourseId }, new { @class = "btn btn-primary" },"")
        </div>
    </div>
}

@section Scripts{
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/daterange")
    <script src="~/Areas/Member/Component/Custom/js/customScript.js"></script>
    <script src="~/Component/Custom/js/SimpleImage.js"></script>
    <script>
        $(document).ready(function () {
            if  ('@ViewData["PhotoPath"]' != null)  {
                $('#scream').show();
                $('#can').hide();
            }
           
            $('#Gender').val('@Model.Gender');
            $('#ServicesCategory').val('@Model.ServicesCategory');
            if ('@ViewData["SelectedRank"]' != null) {
                bindrank();
            }
            $("#ServicesCategory").change(function () {
                $("#RankId").empty();
                bindrank();
            });

        });

        function bindrank() {
            $.ajax({
                type: 'get',
                url: '/api/rankMasters/GetRanks/service/' + $('#ServicesCategory').val(),
                datatype: 'json',
                success: function (ranks) {
                    $.each(ranks, function (i, rank) {
                        $('#RankId').append('<option value="' + rank.Value + '">' + rank.Text + '</option>');
                    });
                    if ('@ViewData["SelectedRank"]' != 0) {
                        $("#RankId").val('@ViewData["SelectedRank"]');
                    }
                },
                error: function () {
                    alert('Server Not Found');
                }
            });
        }
        function imgValidateEdit(fileUploadId, fileLocId, url) {
            let fileTypes = ['jpg', 'jpeg', 'png'];
            let extValidate = fileExtensionValidation(fileUploadId, fileTypes);
            let sizeValidate = fileSizeValidation(fileUploadId, 500);
            if (extValidate == true && sizeValidate == true) {
                //let url = '@Url.Action("ImageUpload")';
                Imageupload(fileUploadId, fileLocId, url);
            }
        }
        function docValidateEdit(fileUploadId, fileLocId, url) {
            let fileTypes = ['pdf'];
            let extValidate = fileExtensionValidation(fileUploadId, fileTypes);
            let sizeValidate = fileSizeValidation(fileUploadId, 1024);
            if (extValidate == true && sizeValidate == true) {
                //let url = '@Url.Action("DocumentUpload")';
                uploadInstepFile(fileUploadId, fileLocId, url);
            }
        }
        var image;
        function upload() {
            $('#scream').hide();
            $('#can').show();
            var imgcanvas = document.getElementById("can");
            var fileinput = document.getElementById("picfile");
            image = new SimpleImage(fileinput);
            image.drawTo(imgcanvas);
        }
    </script>
}
